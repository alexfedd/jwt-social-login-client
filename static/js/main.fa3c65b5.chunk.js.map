{"version":3,"sources":["util/ApiUtil.js","signin/Signin.js","signup/Signup.js","atom/globalState.js","profile/Profile.js","chat/Chat.js","App.js","serviceWorker.js","index.js","assets/user.png"],"names":["ROOT_URL","request","options","headers","Headers","setContentType","append","localStorage","getItem","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","Signin","props","useState","loading","setLoading","useEffect","history","push","className","DingtalkOutlined","style","fontSize","name","initialValues","remember","onFinish","values","loginRequest","method","body","JSON","stringify","setItem","token","catch","error","status","notification","message","description","Item","rules","required","size","prefix","UserOutlined","placeholder","LockOutlined","type","shape","htmlType","to","Signup","signupRequest","success","console","log","loggedInUser","atom","key","default","persistence_UNSTABLE","Meta","Card","Profile","useRecoilState","currentUser","setLoggedInUser","loadCurrentUser","width","border","actions","LogoutOutlined","onClick","removeItem","avatar","src","defaultImage","title","username","stompClient","Chat","useRecoilValue","text","setText","chats","setChats","undefined","activeChat","setActiveChat","messages","setMessages","isModalVisible","setIsModalVisible","allUsers","setAllUsers","selectedUserIds","setSelectedUserIds","chatName","setChatName","connect","loadContacts","chatRoomId","id","msgs","Stomp","require","SockJS","over","Authorization","frame","a","subscribe","onMessageReceived","onerror","onclose","msg","parse","sendMessage","trim","chatId","content","send","newMessages","promises","all","length","defaultAvatar","alt","map","chat","class","aria-hidden","users","sender","value","onChange","event","target","onKeyPress","icon","visible","onCancel","onOk","chatInfo","user_id","createGroupChat","member_ids","err","warning","okText","e","marginBottom","Group","checkedValues","u","display","margin","App","React","createContext","exact","path","render","Boolean","window","location","hostname","match","recoilPersist","storage","sessionStorage","RecoilPersist","updateState","ReactDOM","initializeState","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fa3c65b5.chunk.js","sourcesContent":["const ROOT_URL = \"http://78.24.223.206:8082\";\n\nconst request = (options) => {\n  const headers = new Headers();\n\n  if (options.setContentType !== false) {\n    headers.append(\"Content-Type\", \"application/json\");\n  }\n\n  if (localStorage.getItem(\"accessToken\")) {\n    headers.append(\n      \"Authorization\",\n      \"Bearer \" + localStorage.getItem(\"accessToken\")\n    );\n  }\n\n  const defaults = { headers: headers };\n  options = Object.assign({}, defaults, options);\n\n  return fetch(options.url, options).then((response) =>\n    response?.json().then((json) => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n      return json;\n    })\n  );\n};\n\nexport function login(loginRequest) {\n  return request({\n    url: ROOT_URL + \"/auth/sign-in\",\n    method: \"POST\",\n    body: JSON.stringify(loginRequest),\n  });\n}\n\nexport function signup(signupRequest) {\n  return request({\n    url: ROOT_URL + \"/auth/sign-up\",\n    method: \"POST\",\n    body: JSON.stringify(signupRequest),\n  });\n}\n\nexport function getCurrentUser() {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: ROOT_URL + \"/auth/who-am-i\",\n    method: \"POST\",\n  });\n}\n\nexport function createPrivateChat(chatInfo) {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: ROOT_URL + \"/api/chat-rooms/private\",\n    method: \"POST\",\n    body: JSON.stringify(chatInfo)\n  });\n}\n\nexport function createGroupChat(chatInfo) {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: ROOT_URL + \"/api/chat-rooms/group\",\n    method: \"POST\",\n    body: JSON.stringify(chatInfo)\n  });\n}\n\nexport function getUsers() {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: ROOT_URL + \"/api/users\",\n    method: \"GET\",\n  });\n}\n\nexport function getUserChats() {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: ROOT_URL + \"/api/chat-rooms/my\",\n    method: \"GET\",\n  });\n}\n\nexport function findChatMessages(chatRoomId) {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: ROOT_URL + `/api/chat-messages/${chatRoomId}`,\n    method: \"GET\",\n  });\n}\n\n\n\nexport function findChatMessage(id) {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: ROOT_URL + \"/messages/\" + id,\n    method: \"GET\",\n  });\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Button, Divider, notification } from \"antd\";\nimport {\n  UserOutlined,\n  LockOutlined,\n  DingtalkOutlined,\n} from \"@ant-design/icons\";\nimport { login } from \"../util/ApiUtil\";\nimport \"./Signin.css\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom\";\n\n/*global FB*/\n\nconst Signin = (props) => {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") !== null) {\n      props.history.push(\"/\");\n    }\n  }, []);\n\n\n\n  const onFinish = (values) => {\n    setLoading(true);\n    login(values)\n      .then((response) => {\n        localStorage.setItem(\"accessToken\", response.token);\n        props.history.push(\"/\");\n        setLoading(false);\n      })\n      .catch((error) => {\n        if (error.status === 401) {\n          notification.error({\n            message: \"Error\",\n            description: \"Username or Password is incorrect. Please try again!\",\n          });\n        } else {\n          notification.error({\n            message: \"Error\",\n            description:\n              error.message || \"Sorry! Something went wrong. Please try again!\",\n          });\n        }\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <DingtalkOutlined style={{ fontSize: 50 }} />\n      <Form\n        name=\"normal_login\"\n        className=\"login-form\"\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\n        >\n          <Input\n            size=\"large\"\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Username\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\n        >\n          <Input\n            size=\"large\"\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            shape=\"round\"\n            size=\"large\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n            loading={loading}\n          >\n            Log in\n          </Button>\n        </Form.Item>\n        Not a member yet? <Link to={'/signup'}>Sign up</Link>\n      </Form>\n    </div>\n  );\n};\n\nexport default Signin;\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Button, notification } from \"antd\";\nimport { DingtalkOutlined } from \"@ant-design/icons\";\nimport { signup } from \"../util/ApiUtil\";\nimport \"./Signup.css\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom\";\n\nconst Signup = (props) => {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") !== null) {\n      props.history.push(\"/\");\n    }\n  }, []);\n\n  const onFinish = (values) => {\n    setLoading(true);\n    signup(values)\n      .then((response) => {\n        notification.success({\n          message: \"Success\",\n          description:\n            \"Thank you! You're successfully registered. Please Login to continue!\",\n        });\n        console.log(response)\n        localStorage.setItem('accessToken', response?.token)\n        props.history.push(\"/login\");\n        setLoading(false);\n      })\n      .catch((error) => {\n        notification.error({\n          message: \"Error\",\n          description:\n            error.message || \"Sorry! Something went wrong. Please try again!\",\n        });\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <DingtalkOutlined style={{ fontSize: 50 }} />\n      <Form\n        name=\"normal_login\"\n        className=\"login-form\"\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\n        >\n          <Input size=\"large\" placeholder=\"Username\" />\n        </Form.Item>\n        <Form.Item\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your email!\" }]}\n        >\n          <Input size=\"large\" placeholder=\"Email\" />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\n        >\n          <Input size=\"large\" type=\"password\" placeholder=\"Password\" />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            shape=\"round\"\n            size=\"large\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n            loading={loading}\n          >\n            Signup\n          </Button>\n        </Form.Item>\n        Already a member? <Link to=\"/login\">Log in</Link>\n      </Form>\n    </div>\n  );\n};\n\nexport default Signup;\n","import { atom } from \"recoil\";\n\nexport const loggedInUser = atom({\n  key: \"loggedInUser\",\n  default: {},\n  persistence_UNSTABLE: {\n    type: \"loggedInUser\",\n  },\n});\n\nexport const chatActiveContact = atom({\n  key: \"chatActiveContact\",\n  persistence_UNSTABLE: {\n    type: \"chatActiveContact\",\n  },\n});\n\nexport const chatMessages = atom({\n  key: \"chatMessages\",\n  default: [],\n  persistence_UNSTABLE: {\n    type: \"chatMessages\",\n  },\n});\n","import React, { useEffect } from \"react\";\nimport { Card, Avatar } from \"antd\";\nimport { useRecoilState } from \"recoil\";\nimport { loggedInUser } from \"../atom/globalState\";\nimport { LogoutOutlined } from \"@ant-design/icons\";\nimport { getCurrentUser } from \"../util/ApiUtil\";\nimport defaultImage from './../assets/user.png'\nimport \"./Profile.css\";\n\nconst { Meta } = Card;\n\nconst Profile = (props) => {\n  const [currentUser, setLoggedInUser] = useRecoilState(loggedInUser);\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") === null) {\n      props.history.push(\"/login\");\n    }\n    loadCurrentUser();\n  }, []);\n\n  const loadCurrentUser = () => {\n    getCurrentUser()\n      .then((response) => {\n        setLoggedInUser(response);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    props.history.push(\"/login\");\n  };\n\n  return (\n    <div className=\"profile-container\">\n      <Card\n        style={{ width: 420, border: \"1px solid #e1e0e0\" }}\n        actions={[<LogoutOutlined onClick={logout} />]}\n      >\n        <Meta\n          avatar={\n            <Avatar\n              src={defaultImage}\n              className=\"user-avatar-circle\"\n            />\n          }\n          title={currentUser.username}\n          description={\"@\" + currentUser.username}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Checkbox, Input, message, Modal } from \"antd\";\nimport {\n  getUsers,\n  countNewMessages,\n  findChatMessages,\n  findChatMessage,\n  getUserChats,\n  createPrivateChat,\n  createGroupChat,\n} from \"../util/ApiUtil\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport { loggedInUser, chatMessages } from \"../atom/globalState\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport \"./Chat.css\";\nimport defaultAvatar from \"./../assets/user.png\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom\";\n\nvar stompClient = null;\nconst Chat = (props) => {\n  const currentUser = useRecoilValue(loggedInUser);\n  const [text, setText] = useState(\"\");\n  const [chats, setChats] = useState([]);\n  const [activeChat, setActiveChat] = useState(undefined);\n  const [messages, setMessages] = useState({});\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [allUsers, setAllUsers] = useState([]);\n  const [selectedUserIds, setSelectedUserIds] = useState([]);\n  const [chatName, setChatName] = useState(\"\");\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") === null) {\n      props.history.push(\"/login\");\n    }\n    connect();\n    loadContacts();\n  }, []);\n\n  useEffect(() => {\n    if (activeChat === undefined) return;\n    console.log(activeChat);\n    findChatMessages(activeChat.id).then((msgs) => {\n      console.log(msgs);\n      return setMessages(msgs)\n    });\n    loadContacts();\n  }, [activeChat]);\n\n\n  const connect = () => {\n    const Stomp = require(\"stompjs\");\n    var SockJS = require(\"sockjs-client\");\n    SockJS = new SockJS(\"http://78.24.223.206:8082/ws\");\n    stompClient = Stomp.over(SockJS);\n    stompClient.connect({ Authorization: `Bearer ${localStorage.getItem('accessToken')}` }, async function (frame) {\n      console.log(\"Connected to WebSocket\");\n  \n      // Подписываемся на уведомления для текущего пользователя\n      stompClient.subscribe(`/user/${currentUser.username}/queue/notifications`, onMessageReceived);\n\n  });\n  \n  stompClient.onerror = function (error) {\n      console.log(\"WebSocket Error:\", error);\n  };\n  \n  stompClient.onclose = function () {\n      console.log(\"Connection closed\");\n  };\n  };\n  const onMessageReceived = (msg) => {\n    const notification = JSON.parse(msg.body);\n    // const active = JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n    //   .chatActiveContact;\n    console.log(notification);\n    // if (active.id === notification.senderId) {\n    //   findChatMessage(notification.id).then((message) => {\n    //     const newMessages = JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n    //       .chatMessages;\n    //     newMessages.push(message);\n    //     setMessages(newMessages);\n    //   });\n    // } else {\n    //   message.info(\"Received a new message from \" + notification.senderName);\n    // }\n    loadContacts();\n  };\n\n  const sendMessage = (msg) => {\n    if (msg.trim() !== \"\") {\n      const message = {\n        chatId: activeChat.id,\n        content: msg,\n      };\n      stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(message));\n\n      const newMessages = [...messages.content];\n      newMessages.push(message);\n      setMessages({...messages, content: newMessages});\n    }\n  };\n\n  const loadContacts = () => {\n    const promise = getUserChats();\n\n    promise.then((promises) =>\n      Promise.all(promises).then((chats) => {\n        setChats(chats);\n        console.log(chats);\n        if (activeChat === undefined && chats.length > 0) {\n          setActiveChat(chats[0]);\n        }\n      })\n    );\n  };\n\n  const handleProfileNavigation = () => {\n    props.history.push(\"/\");\n  };\n\n  const onAddChatClick = () => {\n    getUsers().then((users) => {\n      setAllUsers(users);\n      setSelectedUserIds([]); // reset any prior\n      setChatName(\"\");\n      setIsModalVisible(true);\n    });\n  };\n\n  // 2) handle checkbox selections\n  const onUserSelect = (checkedValues) => {\n    setSelectedUserIds(checkedValues);\n  };\n\n  // 3) create chat depending on count\n  const onCreateChat = () => {\n    if (selectedUserIds.length === 0) {\n      message.warning(\"Select at least one user\");\n      return;\n    }\n    if (chatName.trim() === \"\") {\n      message.warning(\"Please enter a chat name\");\n      return;\n    }\n    const promise =\n      selectedUserIds.length === 1\n        ? createPrivateChat({ name: chatName, user_id: selectedUserIds[0] })\n        : createGroupChat({ name: chatName, member_ids: selectedUserIds });\n\n    promise\n      .then(() => {\n        message.success(\"Chat created\");\n        setIsModalVisible(false);\n        loadContacts(); // refresh the sidebar\n      })\n      .catch((err) => {\n        console.error(err);\n        message.error(\"Could not create chat\");\n      });\n  };\n\n  return (\n    <div id=\"frame\">\n      <div id=\"sidepanel\">\n        <div id=\"profile\">\n          <div className=\"wrap\">\n            <img\n              id=\"profile-img\"\n              src={defaultAvatar}\n              className=\"online\"\n              alt=\"\"\n            />\n            <p>{currentUser.username}</p>\n            <div id=\"status-options\">\n              <ul>\n                <li id=\"status-online\" className=\"active\">\n                  <span className=\"status-circle\"></span> <p>Online</p>\n                </li>\n                <li id=\"status-away\">\n                  <span className=\"status-circle\"></span> <p>Away</p>\n                </li>\n                <li id=\"status-busy\">\n                  <span className=\"status-circle\"></span> <p>Busy</p>\n                </li>\n                <li id=\"status-offline\">\n                  <span className=\"status-circle\"></span> <p>Offline</p>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div id=\"search\" />\n        <div id=\"contacts\">\n          <ul>\n            {chats.map((chat, key) => (\n              <li\n                onClick={() => setActiveChat(chat)}\n                className={\n                  activeChat && chat.id === activeChat.id\n                    ? \"contact active\"\n                    : \"contact\"\n                }\n              >\n                <div class=\"wrap\">\n                  <span className=\"contact-status online\"></span>\n                  <img id={chat.id} src={defaultAvatar} alt=\"\" />\n                  <div class=\"meta\">\n                    <p class=\"name\">{chat.name}</p>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div id=\"bottom-bar\">\n          <button onClick={handleProfileNavigation} id=\"addcontact\">\n            <i className=\"fa fa-user fa-fw\" aria-hidden=\"true\"></i>{\" \"}\n            <span>Profile</span>\n          </button>\n          <button onClick={onAddChatClick} id=\"settings\">\n            <i className=\"fa fa-cog fa-fw\" aria-hidden=\"true\"></i>{\" \"}\n            <span>Add chat</span>\n          </button>\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"contact-profile\">\n          <img src={activeChat && defaultAvatar} alt=\"\" />\n          <p>{activeChat && activeChat.name}</p>\n        </div>\n        <ScrollToBottom className=\"messages\">\n          <ul>\n            {messages.content?.map((msg) => (\n              <li className={msg.sender.id !== currentUser.id ? \"replies\" : \"sent\"}>\n                <p>{msg.content}</p>\n                {console.log(msg, messages)}\n              </li>\n            ))}\n          </ul>\n        </ScrollToBottom>\n        <div className=\"message-input\">\n          <div className=\"wrap\">\n            <input\n              name=\"user_input\"\n              size=\"large\"\n              placeholder=\"Write your message...\"\n              value={text}\n              onChange={(event) => setText(event.target.value)}\n              onKeyPress={(event) => {\n                if (event.key === \"Enter\") {\n                  sendMessage(text);\n                  setText(\"\");\n                }\n              }}\n            />\n\n            <Button\n              icon={<i class=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>}\n              onClick={() => {\n                sendMessage(text);\n                setText(\"\");\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      <Modal\n        title=\"Select users to chat with\"\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        onOk={onCreateChat}\n        okText=\"Create chat\"\n      >\n        <Input\n          placeholder=\"Enter chat name\"\n          value={chatName}\n          onChange={(e) => setChatName(e.target.value)}\n          style={{ marginBottom: 16 }}\n        />\n        <Checkbox.Group\n          style={{ width: \"100%\" }}\n          value={selectedUserIds}\n          onChange={onUserSelect}\n        >\n          {allUsers.map((u) => (\n            <Checkbox\n              key={u.id}\n              value={u.id}\n              style={{ display: \"block\", margin: \"8px 0\" }}\n            >\n              {u.username}\n            </Checkbox>\n          ))}\n        </Checkbox.Group>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Signin from \"./signin/Signin\";\nimport Signup from \"./signup/Signup\";\nimport Profile from \"./profile/Profile\";\nimport Chat from \"./chat/Chat\";\nimport \"./App.css\";\nimport { HashRouter } from \"react-router-dom/cjs/react-router-dom\";\n\nexport const AppContext = React.createContext();\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" render={(props) => <Profile {...props} />} />\n          <Route\n            exact\n            path=\"/login\"\n            render={(props) => <Signin {...props} />}\n          />\n          <Route\n            exact\n            path=\"/signup\"\n            render={(props) => <Signup {...props} />}\n          />\n          <Route exact path=\"/chat\" render={(props) => <Chat {...props} />} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport recoilPersist from \"recoil-persist\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst { RecoilPersist, updateState } = recoilPersist([], {\n  key: \"recoil-persist\",\n  storage: sessionStorage,\n});\n\nReactDOM.render(\n  <RecoilRoot initializeState={updateState}>\n    <RecoilPersist />\n    <App />\n  </RecoilRoot>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/user.1f0a44cd.png\";"],"sourceRoot":""}